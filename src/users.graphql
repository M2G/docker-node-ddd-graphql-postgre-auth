# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String
  email: String
  password: String
  first_name: String
  last_name: String
  username: String
  created_at: Int
  modified_at: Int
  reset_password_token: String
  reset_password_expires: String
  deleted_at: Int
  last_connected_at: Int
}

type Edge {
   node: User
   cursor: String
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPrevPage: Boolean
}

type Users {
  totalCount: Int
  edges: [Edge]
  pageInfo: PageInfo
}

enum sortOrder {
  ASC
  DESC
}

type Query {
  users(first: Int!, afterCursor: String, filters: String): Users!
}

type Query {
  getUser(id: String!): User
}

type Mutation {
  createUser(input: CreateUserInput!): User!
}

type Mutation {
  resetPassword(input: ResetPasswordInput!): Status!
}

type Mutation {
  forgotPassword(email: String!): Status!
}

type Mutation {
  deleteUser(id: String!): User
}

type Mutation {
  updateUser(id: String!, input: UpdateUserInput): User
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type Status {
  success: Boolean
}

input CreateUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String
  first_name: String
  last_name: String
  username: String
}

# ------------------------------------------------------
# TESTS ONLY
# ------------------------------------------------------

# A book has a title and author
type Book {
  title: String!
  author: Author!
}

# An author has a name
type Author {
  name: String!
}

type Library {
  branch: String!
  books: [Book!]
}

# Queries can fetch a list of libraries
type Query {
  libraries: [Library]
}
